// src/common/safe-url.ts
function safeUrl(url) {
  try {
    return new URL(url);
  } catch (ex) {
    return;
  }
}

// src/extension.ts
var extension = "browser" in globalThis && browser.runtime ? browser : chrome;

// src/signature.ts
var keys = {
  publicKey: `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxkaMDjCfAuYlXmzRKyNmZ7f9rP/8jsXLK/Qbvf2XcVngcUy8Y7J3bM0LN1dxriXjHqhHePRsDQBxky+DQd0ODdlLq1ISFJnFshWE1TjMj22GR46tdQ6gDL4vIo9iGNQeb+0gqPVCfrws14+2gvWdlimKvFR//lP55M/WJvZ+F8T1a+DvPBMDCHQ6sKdq/J0kjuNM+CyYrRx++EZpMyu6JnUMoS/WF20XWAUS0slIV/LmorJ82xGBER6X+CQzf2HcoW8YbmDLbuPRYKZCnzb/37+NndPFyoiw436I6eSfGlBRcztYJEf0JIQ5f81/HKZ867U/0tP2XuSDsngTsWM/FwIDAQAB

-----END PUBLIC KEY-----`,
  privateKey: `-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDGRowOMJ8C5iVebNErI2Znt/2s//yOxcsr9Bu9/ZdxWeBxTLxjsndszQs3V3GuJeMeqEd49GwNAHGTL4NB3Q4N2UurUhIUmcWyFYTVOMyPbYZHjq11DqAMvi8ij2IY1B5v7SCo9UJ+vCzXj7aC9Z2WKYq8VH/+U/nkz9Ym9n4XxPVr4O88EwMIdDqwp2r8nSSO40z4LJitHH74RmkzK7omdQyhL9YXbRdYBRLSyUhX8uaisnzbEYERHpf4JDN/YdyhbxhuYMtu49FgpkKfNv/fv42d08XKiLDjfojp5J8aUFFzO1gkR/QkhDl/zX8cpnzrtT/S0/Ze5IOyeBOxYz8XAgMBAAECggEAJcva9PWFylqu8vIRaYTFB66GOA1QSrMfyNAu3afSz7PPWinDm8mwhFgN9E3CCO2F/xkbDs6hLlVQUTt0bQDDphYvG4h4k97AVfNOMAs0y36YY1mqbS8NiYBToeXtUEhXSQTN/gdK1rfuYGUv6IUDtlVS8hW1lHjToS+RZjoEzWjTSdWb+GlPErJUep8tKQdLnafoaHB2ifQvIkXhDmNmjgFGIt19ZRrgPkmJdkNox0xun+l6K6MaW3OljwVnmwY4vScURAEYwJwVebE2v7fw/+IYJ4WFKusd3pr6/GGc4fFO1z+suou6UtRGQO8cUiZ3t4nSZmz8iBfnoKDPChv9AQKBgQDuto16eEx4vdHXXfqF7/yU1W5/ol/u7y9F9do1+pODk2yEzoL9nshvx+HdZHWf1maMK1YLiXNq2DahbyTei1vtELkiZybdwonLaD70vNllx1KUM4XJl7k6UKC1pD3darr9yiWV1hiUJDssd0awpChI+IjLbaBBd9j6F7YToXAZgQKBgQDUolUeszuzVfp07RXwQQO6GhAVzm934KpWM1CnHYlWaOgHNzGLBZP3o+/SPF8HtyZOsnTYp60WMMAbXXloP1U44Ehs8ES2P/SBvlEKnLNyTffNogHTH+QU+n62VKjM4iHCYpAyLzFNyxPFeQmuK7c7wcx0D/hSvyjjFHKfghY0lwKBgCt45VT7WXnXn8Jn4/rGVKpKICBwUqYxutszxbR02K5qh6W78hD7/KaWsSRfaihcpDo8niPluTYo//HwSreYi3olxIFmZaaXCf8YEfcB+VlWrkw9Ac1PqzTagBn0Oiv7hug3Cxc5cSpxWrFjW2VJz+hSEp9xbHDfwYzyCn+Ss9aBAoGBAJoWWSC6OdUnxSveczt7obvHD0j+JAD3Kfj1jsjLuq6Hrz0rXheknymh/zSW0zbAHl6BK/Ok7uVZxp0OC+DjpFpnDZUEOIbpqcIrrIbIL7HxllXJxRC914bsT87JYtm2NUisLFpxoIUDWPyNTdqNi2cedY7V09oC9Ro5wyacGoNZAoGBAMOguaAcnTZ/Fx2YjP+3LW510PBeidQbbjhGuVP8W25t0GIa/XmKwGz2wqqSpicLTSLIKoIk0uA4uL6Ly8KHIeG6syRwKOpugiLU8RmpxeY0DNVY0R/JlB59WG9CdW7aOFmb7kFJVt8EIjrF4dArLd23YWpqu77WauN+dJNMbvbz
-----END PRIVATE KEY-----`
};
function str2ab(str) {
  const buf = new ArrayBuffer(str.length);
  const bufView = new Uint8Array(buf);
  for (let i = 0, strLen = str.length; i < strLen; i++) {
    bufView[i] = str.charCodeAt(i);
  }
  return buf;
}
function importPrivateKey(pem) {
  const pemHeader = "-----BEGIN PRIVATE KEY-----";
  const pemFooter = "-----END PRIVATE KEY-----";
  const pemContents = pem.substring(
    pemHeader.length,
    pem.length - pemFooter.length
  );
  const binaryDerString = globalThis.atob(pemContents);
  const binaryDer = str2ab(binaryDerString);
  return globalThis.crypto.subtle.importKey(
    "pkcs8",
    binaryDer,
    {
      name: "RSA-PSS",
      hash: "SHA-256"
    },
    true,
    ["sign"]
  );
}
importPrivateKey(keys.privateKey).then((v) => {
  console.log("Ok i have the key...", v);
  const bytes_to_encode = new TextEncoder().encode("something");
  console.log("Encoded bytes", bytes_to_encode);
  globalThis.crypto.subtle.sign(
    {
      name: "RSA-PSS",
      hash: "SHA-256",
      saltLength: 32
    },
    v,
    bytes_to_encode
  ).then((v2) => {
    const bytes_of_sig = new Uint8Array(v2);
    console.log("Bytes of signature", bytes_of_sig);
    const b64 = btoa(String.fromCharCode.apply(null, bytes_of_sig));
    console.log("Signature is", b64);
  }).catch((ex) => {
    console.log("Nope, didnt work", ex);
  });
});
var Signature = new class SignatureClass {
  key = null;
  last_signature = null;
  constructor() {
    this.initialize();
  }
  initialize = async () => {
    await this.importKey(keys.privateKey);
    await this.createSignature();
  };
  importKey = async (pem) => {
    const pemHeader = "-----BEGIN PRIVATE KEY-----";
    const pemFooter = "-----END PRIVATE KEY-----";
    const pemContents = pem.substring(
      pemHeader.length,
      pem.length - pemFooter.length
    );
    const binaryDerString = globalThis.atob(pemContents);
    const binaryDer = str2ab(binaryDerString);
    this.key = await globalThis.crypto.subtle.importKey(
      "pkcs8",
      binaryDer,
      {
        name: "RSA-PSS",
        hash: "SHA-256"
      },
      true,
      ["sign"]
    );
    return this.key;
  };
  createIdentityString = (date) => {
    return `james@skelly.jamesh.me@${(date ?? /* @__PURE__ */ new Date()).toISOString()}`;
  };
  createSignature = async () => {
    const key = this.key ?? await this.importKey(keys.privateKey);
    const now = /* @__PURE__ */ new Date();
    const identity = this.createIdentityString(now);
    const identity_bytes = new TextEncoder().encode(identity);
    const sign_result = await globalThis.crypto.subtle.sign(
      {
        name: "RSA-PSS",
        hash: "SHA-256",
        saltLength: 32
      },
      key,
      identity_bytes
    );
    const bytes_of_sig = new Uint8Array(sign_result);
    const b64 = btoa(String.fromCharCode.apply(null, bytes_of_sig));
    this.last_signature = {
      time: now.getTime(),
      phrase: identity,
      signature: b64
    };
    return this.last_signature;
  };
  getSignature = async () => {
    const now = (/* @__PURE__ */ new Date()).getTime();
    if (!this.last_signature || this.last_signature.time < now - 1e4) {
      return this.createSignature();
    }
    return this.last_signature;
  };
}();

// src/service-worker.ts
extension.runtime.onMessage.addListener((message, sender, sendResponse) => {
  console.log("Received message on service worker", message);
  (async () => {
    if (message === "return-sender") {
      return sender;
    }
    if (message === "request-signature") {
      return await Signature.getSignature();
    }
    if (typeof message === "object" && message.type === "fetch" && typeof message.url === "string") {
      const url = safeUrl(message.url);
      if (!url) {
        return null;
      }
      const { phrase, signature } = await Signature.getSignature();
      const response = await fetch(url, {
        method: "GET",
        headers: {
          Authorization: `Skelly ${phrase} ${signature}`
        }
      });
      const text = await response.text();
      return text;
    }
  })().then((a) => {
    console.log("Sending response", a);
    sendResponse(a);
  });
  return true;
});
extension.tabs.onCreated.addListener((tab) => {
  const tab_id = tab.id;
  const tab_url_value = tab.url ?? tab.pendingUrl;
  if (!tab_url_value || !tab_id) {
    return;
  }
  const url = safeUrl(tab_url_value);
  if (!url) {
    return;
  }
  if (!url.pathname.endsWith(".skelly")) {
    return;
  }
  extension.tabs.update(tab_id, {
    url: `${extension.runtime.getURL("reader.html")}?read=${url.href}`
  });
});
extension.tabs.onUpdated.addListener((tabId, info) => {
  if (!info.url) {
    return;
  }
  const url = safeUrl(info.url);
  if (!url) {
    return;
  }
  if (!url.pathname.endsWith(".skelly")) {
    return;
  }
  extension.tabs.update(tabId, {
    url: `${extension.runtime.getURL("reader.html")}?read=${url.href}`
  });
});
//# sourceMappingURL=data:application/json;base64,
